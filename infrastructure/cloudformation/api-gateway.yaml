---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS API Gateway Setup
Resources:
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'UserAuthAPI'
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'authenticate'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticateUser.Arn}/invocations'
  AuthenticateUser:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'authenticate.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: 's3://your-s3-bucket/authenticate.zip'
      Runtime: 'nodejs14.x'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                  - 'dynamodb:*'
                Resource: '*'
Outputs:
  ApiId:
    Description: 'API Gateway ID'
    Value: !Ref ApiGatewayRestApi
  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt AuthenticateUser.Arn
